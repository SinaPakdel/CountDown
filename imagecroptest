package com.teamyar.presentation.mainFr

import android.Manifest
import android.Manifest.permission.WRITE_EXTERNAL_STORAGE
import android.annotation.SuppressLint
import android.app.Activity
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.net.http.SslError
import android.os.Bundle
import android.provider.MediaStore
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.webkit.CookieManager
import android.webkit.SslErrorHandler
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.ActionBarDrawerToggle
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import androidx.core.view.GravityCompat
import androidx.core.view.isVisible
import androidx.databinding.DataBindingUtil
import androidx.drawerlayout.widget.DrawerLayout
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.repeatOnLifecycle
import androidx.lifecycle.viewModelScope
import androidx.recyclerview.widget.LinearLayoutManager
import com.bumptech.glide.Glide
import com.teamyar.R
import com.teamyar.core.ui.adapter.ItemAdapter
import com.teamyar.core.ui.dialog.CustomDialog
import com.teamyar.core.utils.Constants.URL_HOME_PAGE
import com.teamyar.core.utils.FileUtils
import com.teamyar.core.utils.FileUtils.createImageFile
import com.teamyar.core.utils.FileUtils.download_folder
import com.teamyar.core.utils.ItemModelUtils
import com.teamyar.core.utils.JavascryptInterface
import com.teamyar.core.utils.NetworkUtils
import com.teamyar.core.utils.PermissionUtils
import com.teamyar.core.utils.uiUtils.showToast
import com.teamyar.databinding.DialogCameraGalleryBinding
import com.teamyar.databinding.FragmentMainBinding
import com.teamyar.model.ItemModel
import com.teamyar.model.MenuItem
import com.teamyar.model.Status
import com.teamyar.presentation.base.BaseFragment
import com.yalantis.ucrop.UCrop
import kotlinx.coroutines.launch
import java.io.File
import java.io.IOException
import javax.inject.Inject

class MainFragment : BaseFragment() {
    private val TAG = "MainFragment"
    private lateinit var binding: FragmentMainBinding
    private lateinit var menuAdapter: ItemAdapter
    private lateinit var drawerHeaderView: View
    private lateinit var galleryImageResult: ActivityResultLauncher<Intent>
    private lateinit var cameraImageResult: ActivityResultLauncher<Intent>


    @Inject
    lateinit var mainVm: MainVm
    private lateinit var actionBarDrawerToggle: ActionBarDrawerToggle

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        baseActivityComponent.inject(this)
        isValidSidObserver()

        logoutStatusObserver()

        PermissionUtils.requestPermission(
            requireContext(),
            permission = arrayOf("android.permission.WRITE_EXTERNAL_STORAGE"),
            resources.getString(R.string.deny_permission_message),
            onPermissionDenied = {

            },
            onPermissionGranted = {
                PermissionUtils.storagePermissionGranted(requireContext())
            }
        )

    }


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_main, container, false)
        drawerHeaderView = binding.drawerNavigation.inflateHeaderView(R.layout.drawer_header)

        mainVm.requestToFullInfo()

        setupSideBarMenu()
        setupWebView()
        initialMenuAdapter(ItemModelUtils.createMenuModels(requireContext().applicationContext))
        // changeMenuDirection()
        observers()
        binds()



        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        galleryImageResult = registerGalleryImageResult { uri ->
            showToast(requireContext(), "Gallery $uri")
            if (uri != null) {

//                openCropActivity(uri, uri)
                /*                registerCropImage(uri, uri) {
                                    Log.e(TAG, "initializeActivityResultLaunchers: $it")
                                }*/
            }
        }

        cameraImageResult = registerCameraImageResult(download_folder) { uri, bitmap ->
            showToast(requireContext(), "Camera $uri")
            if (uri != null && bitmap != null) {
                val imageFile = uri.path?.let { File(it) }
                imageFile?.let { FileUtils.saveCapturedImage(bitmap, it) }
            }
            if (uri != null) UCrop.of(uri, uri).start(requireActivity())
        }
    }

    enum class CropState {
        GALLERY,CAMERA
    }

    private fun openCropActivity(uri: Uri, uri1: Uri,cropState: CropState) {
        UCrop.of(uri, uri1).start(requireActivity())
    }


    private fun binds() {
        with(binding) {
            implUserImageDialog()
        }

    }
    fun loadBitmapFromUri(uri: Uri): Bitmap? {
        return try {
            val inputStream = requireContext().contentResolver.openInputStream(uri)
            BitmapFactory.decodeStream(inputStream)
        } catch (e: IOException) {
            e.printStackTrace()
            null
        }
    }
    private fun registerGalleryImageResult(
        itemClickListener: (Uri?) -> Unit
    ): ActivityResultLauncher<Intent> {
        return registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                itemClickListener.invoke(result.data?.data)
            }
        }
    }

    private fun registerCameraImageResult(
        directory: File,
        itemClickListener: (Uri?, Bitmap?) -> Unit
    ): ActivityResultLauncher<Intent> {
        return registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val imageFile = createImageFile(directory)
                val imageUri = FileProvider.getUriForFile(
                    requireContext(),
                    "${requireContext().packageName}.fileprovider",
                    imageFile
                )
//                val bitmap = result.data?.extras?.get("data") as Bitmap?
                val bitmap = loadBitmapFromUri(imageUri)
                // Save the captured image to the specified directory
                if (bitmap != null) FileUtils.saveCapturedImage(bitmap, imageFile)
                itemClickListener.invoke(imageUri, bitmap)
                Log.e(TAG, "registerCameraImageResult is ok: $imageUri")
            } else {
                Log.e(TAG, "registerCameraImageResult: null")
                itemClickListener.invoke(null, null)
            }
        }
    }

    private fun registerCropImage(
        sourceUri: Uri,
        destinationUri: Uri,
        itemClickListener: (Uri?) -> Unit
    ): ActivityResultLauncher<Intent> {
        return registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            if (result.resultCode == Activity.RESULT_OK) {
                val options = UCrop.Options()
                UCrop.of(sourceUri, destinationUri)
                    .withOptions(
                        options.apply {
                            setCompressionQuality(100)
                            withMaxResultSize(200, 200)
                            setToolbarColor(
                                ContextCompat.getColor(
                                    requireContext(),
                                    R.color.colorAccent
                                )
                            )
                            setToolbarTitle("ویرایش عکس")
                        }
                    )
                    .start(requireActivity())

                itemClickListener.invoke(result.data?.data)
            }
        }
    }

    private fun FragmentMainBinding.implUserImageDialog() {
        drawerHeaderLayout.imgUserSetting.setOnClickListener {
            PermissionUtils.requestPermission(
                context = requireContext(),
                permission = arrayOf(WRITE_EXTERNAL_STORAGE, Manifest.permission.CAMERA),
                deniedMsg = resources.getString(R.string.deny_permission_message),
                onPermissionGranted = {
                    Log.e(TAG, "onPermissionGranted: ")
                    CustomDialog(
                        requireContext(),
                        DialogCameraGalleryBinding::inflate
                    ) { view, dialog ->
                        val directory = download_folder
                        when (view.id) {
                            R.id.tvGallery -> {
                                showToast(requireContext(), "Gallery")
                                galleryImageResult.launch(
                                    Intent(
                                        Intent.ACTION_PICK,
                                        MediaStore.Images.Media.EXTERNAL_CONTENT_URI
                                    )
                                )
                                dialog.dismiss()
                            }

                            R.id.tvCamera -> {
                                showToast(requireContext(), "Camera")
                                val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
                                val createImageFile = createImageFile(directory)

                                intent.putExtra(
                                    MediaStore.EXTRA_OUTPUT,
                                    FileProvider.getUriForFile(
                                        requireContext(),
                                        "${requireContext().packageName}.fileprovider",
                                        createImageFile
                                    )
                                )
                                cameraImageResult.launch(intent)
                                dialog.dismiss()

                            }
                        }
                    }.show()

                }, onPermissionDenied = {
                    Log.e(TAG, "onPermissionDenied: ")
                }
            )
        }
    }


    private fun isValidSidObserver() {
        mainVm.inValidSidLiveData().observe(this) { isInValid ->
            if (!isInValid) {
                navigationCallback.openFragment(R.id.action_des_main_site_to_des_login, null, false)
            } else
                setupWebView()
        }
    }

    private fun logoutStatusObserver() {
        mainVm.logoutStatusModelLiveData().observe(this) { statusModel ->
            when (statusModel.status) {
                Status.SUCCESS -> navigationCallback.openFragment(R.id.des_login, null, true)
                Status.ERROR -> {
                    if (NetworkUtils.isOnline(requireContext()))
                        showToast(requireContext(), R.string.check_your_connection)
                }

                Status.LOADING -> {

                }
            }
        }
    }

    private fun observers() {
        viewLifecycleOwner.lifecycleScope.launch {
            viewLifecycleOwner.lifecycle.repeatOnLifecycle(Lifecycle.State.STARTED) {
                mainVm.userPhoto.collect {
                    Glide.with(requireContext())
                        .load(it)
                        .circleCrop()
                        .into(binding.drawerHeaderLayout.imgUserLogo);
                }
            }
        }
    }

    private fun changeMenuDirection() {
        with(binding) {
            val layoutParams = menuBtn.layoutParams as ConstraintLayout.LayoutParams
            if (mainVm.isRtlDirection()) {
                layoutParams.startToStart = ConstraintLayout.LayoutParams.UNSET
                layoutParams.endToEnd = ConstraintLayout.LayoutParams.PARENT_ID
            } else {
                layoutParams.endToEnd = ConstraintLayout.LayoutParams.UNSET
                layoutParams.startToStart = ConstraintLayout.LayoutParams.PARENT_ID
            }
            menuBtn.layoutParams = layoutParams


        }
    }

    @SuppressLint("SetJavaScriptEnabled")
    private fun setupWebView() {
        //setting for webview
        CookieManager.getInstance().removeAllCookies(null)
        CookieManager.getInstance().setCookie("https://" + mainVm.domain() + "/", mainVm.getSid())
//    binding.webView.webChromeClient = WebChromeClient()
        with(binding.webView) {

            settings.apply {
                javaScriptEnabled = true
                allowFileAccess = true
                domStorageEnabled = true
                javaScriptCanOpenWindowsAutomatically = true
                setSupportMultipleWindows(false)
                mediaPlaybackRequiresUserGesture = false
                javaScriptEnabled = true
            }
            addJavascriptInterface(JavascryptInterface(requireActivity()), "android")

            webViewClient = object : WebViewClient() {
                override fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean {
                    //binding.webView.loadUrl("https://" + mainVm.domain() + "/?page=/home/index&id=768",mainVm.headerHttp())
                    return false
                }

                override fun onPageFinished(view: WebView?, url: String?) {
                    super.onPageFinished(view, url)
                    CookieManager.getInstance().removeAllCookies(null)
                    CookieManager.getInstance()
                        .setCookie("https://" + mainVm.domain() + "/", mainVm.getSid())
                    binding.webView.loadUrl("javascript:$.Teamyar.android.isAndroid();")
                }

                override fun onLoadResource(view: WebView?, url: String?) {
                    super.onLoadResource(view, url)


                }

                override fun doUpdateVisitedHistory(
                    view: WebView?,
                    url: String?,
                    isReload: Boolean
                ) {
                    super.doUpdateVisitedHistory(view, url, isReload)
                    mainVm.viewModelScope.launch {
                        if (url != null) {
                            binding.menuBtn.isVisible = url.contains(URL_HOME_PAGE)
                        }
                    }
                }

                override fun onReceivedSslError(
                    view: WebView?,
                    handler: SslErrorHandler,
                    error: SslError?
                ) {
                    handler.proceed() // Ignore SSL certificate errors
                }
            }
            loadUrl("https://" + mainVm.domain() + URL_HOME_PAGE + "/")
        }

    }

    private fun setupSideBarMenu() {
        actionBarDrawerToggle = ActionBarDrawerToggle(
            requireActivity(),
            binding.drawer, R.string.nav_open, R.string.nav_close
        )

        binding.drawer.addDrawerListener(actionBarDrawerToggle)
        actionBarDrawerToggle.syncState()


        with(binding) {
            menuBtn.setOnClickListener {
                drawerDirectionState(drawerNavigation.layoutParams as DrawerLayout.LayoutParams)
            }
        }
    }

    private fun FragmentMainBinding.drawerDirectionState(layoutParams: DrawerLayout.LayoutParams) {
        drawer.openDrawer(
            GravityCompat.START

            /*if (!mainVm.isRtlDirection()) {
                layoutParams.gravity = GravityCompat.START
                GravityCompat.START
            } else {
                layoutParams.gravity = GravityCompat.END
                GravityCompat.END
            }*/
        )
    }

    private fun initialMenuAdapter(itemModels: ArrayList<ItemModel>) {
        menuAdapter = ItemAdapter(
            itemModels,
            onItemClickListener = object : ItemAdapter.OnItemClickListener {
                override fun onItemClickListener(itemModel: ItemModel) {
                    when (itemModel.itemType?.type()) {
                        MenuItem.SETTING -> navigationCallback.openFragment(
                            R.id.des_setting,
                            null,
                            false
                        )

                        MenuItem.SWITCH -> navigationCallback.openFragment(
                            R.id.des_switch,
                            null,
                            false
                        )

                        MenuItem.SIGN_OUT -> {
                            mainVm.logout()
                        }
                    }
                }
            })

        binding.recyclerView.apply {
            adapter = menuAdapter
            layoutManager = LinearLayoutManager(requireContext())
        }
    }

}
